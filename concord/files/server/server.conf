{{ define "concord.db" }}
db {
  url="jdbc:postgresql://{{ .Db.server }}:{{ .Db.port }}/{{ .Db.database }}"
  appUsername = "{{ .Db.user }}"
  appPassword = "{{ .Db.password }}"
  inventorUsername = "{{ .Db.user }}"
  inventoryPassword = "{{ .Db.password }}"

  maxPoolSize = 20 # NEW

  changeLogParameters {
    superuserAvailable = "{{ .Values.database.superuserAvailable }}"
    createExtensionAvailable = "{{ .Values.database.createExtensionAvailable }}"
    defaultAdminToken = "{{ .Values.server.adminToken }}"
    defaultAgentToken = "{{ .Values.server.agentToken }}"
  }
}

secretStore {
  serverPassword = "{{ .Db.password | b64enc }}"
  secretStoreSalt = "{{ .Db.password | b64enc }}"
  projectSecretSalt = "{{ .Db.password | b64enc }}"
}
{{ end }}

concord-server {

  {{- if .Values.host }}
  host={{ .Values.host }} # remove? doesn't exist in upstream Concord
  {{ end -}}

  {{ if eq .Values.database.type "internal" }}
    {{ include "concord.db" (dict "Values" .Values "Db" .Values.database.internal) | indent 2 }}
  {{ else if eq .Values.database.type "external" }}
    {{ include "concord.db" (dict "Values" .Values "Db" .Values.database.external) | indent 2 }}
  {{ end }}

  server {
    secureCookies = true # only for HTTPS
  }

  process {
    maxStateAge = "{{ .Values.server.maxStateAge }}" # NEW
  }

  audit {
    enabled = true # NEW
    maxLogAge = "{{ .Values.server.maxLogAge }}" # NEW
  }

  {{- if .Values.ldap.enabled }}
  # AD/LDAP authentication
  ldap {
    url = "{{ .Values.ldap.url }}"
    searchBase = "{{ .Values.ldap.searchBase }}"
    principalSearchFilter = "{{ .Values.ldap.principalSearchFilter }}"
    # This is used by the UI
    userSearchFilter = "{{ .Values.ldap.userSearchFilter }}"
    usernameProperty = "{{ .Values.ldap.usernameProperty }}"
    mailProperty = "{{ .Values.ldap.mailProperty }}"
    groupSearchFilter = "{{ .Values.ldap.groupSearchFilter }}"
    groupNameProperty = "{{ .Values.ldap.groupNameProperty }}"
    groupDisplayNameProperty = "{{ .Values.ldap.groupDisplayNameProperty }}"
    systemUsername = "{{ .Values.ldap.systemUsername }}"
    systemPassword = "{{ .Values.ldap.systemPassword }}"
  }
  {{ end -}}

  {{- if .Values.oidc.enabled }}
  # OpenID Connect support
  oidc {
    enabled = true
    clientId = "{{ .Values.oidc.clientId }}"
    secret = "{{ .Values.oidc.secret }}"
    discoveryUri = "{{ .Values.oidc.discoveryUri }}/.well-known/openid-configuration"
    urlBase = "{{ .Values.oidc.urlBase }}"
    afterLoginUrl = "{{ .Values.oidc.afterLoginUrl }}"
    afterLogoutUrl = "{{ .Values.oidc.afterLogoutUrl }}"

    roles = [
      "concordAdmin"
    ]
  }
  {{ end -}}

  {{ if .Values.github.enabled }}
  github {
    githubDomain = "{{ .Values.github.domain }}"
    secret = "{{ .Values.github.secret }}"
  }
  {{ end }}

}
